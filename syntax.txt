function <name> <arg tuple> -> <result tuple> {expression list}

import([
  iterative_factorial : "magic::math::IterativeFactorial",
  stuff : "magic::math::DoTheRightThing"
]);

function toHSV (r int = 0, g int = 0, b int = 0) -> (h int = 1, s int = 2, v int = 3) {
  //return (h, _, v)
  result.h = int 100;
}


a = {
  v = args.someParam;
  q = Color(1, 2, 3);
  print q;
  result = int 100;
}

print typeof a
 -> expressionlist
print a.args
  -> (someParam ?)
print a.result
  -> (int)
print a.expresions
  -> ["v int = someParam", "q = Color(1, 2, 3)", "print q", "result = int 100"]

b = function (someparam int = 10) -> (int a)
print typeof b
 -> function
print b.args
 -> (someParam int = 10)
print b.result
 -> (int)



merge (name type, ... name type) with (value value value)
give  (name type = value, name type = value)






type Color = (r int, g int, b int);

type Yellow = Color(255, 255, 0)
print Yellow
 -> Yellow (r int = 255, g int = 255, b int = 0)
Green = Yellow(0)
print Green
 -> Color (r int = 0, g int = 255, b int = 0)
print Color(255, 255, 0)
 -> Yellow (r int = 255, g int = 255, b int = 0)

a Yellow;
print a
 -> Yellow (r int = 255, g int = 255, b int = 0)


tuple merging
print (1, 2, 3) : (3, 4, 5)
 -> (3, 4, 5)
print (1, 2, 3) : (3, _, 5)
 -> (3, 2, 5)
print (a = 1, b = 2, c = 3) | (c = 5)
 -> (a = 1, b = 2, c = 5)
print (a = 1) : (b = 2)
 -> (a = 1, b = 2)
print (a = 1) : (2)
 -> Can't merge tuple (a int = 1) with (* int = 2)
print int : int
 -> (* int = ?, * int = ?)


final args = merge (expression args) (function args) (call args)
execute expression list
return merge (function result) (expression result)


myRed int = 1;
myGreen int = 2;
(r = myRed, g = myGreen) = Yellow;
print myRed
 -> 255
print myGreen
 -> 255


a = bind (r int = 1, g int = 2, b int = 3) (_, 10, _)
print a
 -> (r int = 1, <g> int = 10, b int = 3)
print a : (3, 4)
 -> (r int = 3, <g> int = 10, b int = 4)
print unbind(a) : (3, 4)
 -> Error, can't merge (r int = 3, g int = 10, b int = 4) with (int = 3, int = 4)
print unbind(a) : (6, 7, 8)
 -> (r int = 6, g int = 7, b int = 8)



type function = (args ?, result ?, code expressionlist)

function curry(a function, b arg) -> function {
  return function(bind(a.args, arg), a.result, a.code);
}






a = Color(1, 2, 3);
b = car(a);
c = cdr(a);

print b;
 -> (r int = 1)
print c;
 -> (g int = 2, b int = 3)
print cons(b,c)
 -> Color (r int = 1, g int = 2, b int = 3)
print stripname(a)
 -> Tuple<int, 3> (int = 1, int = 2, int = 3)
print a[0]
 -> (r int = 1)
print a.r
 -> (int = 1)

a int[] = [1, 2, 3]
print a[0]
 -> (int = 1)




(foo, bar, _) = toHSV color;
(1, 2, 3);


MyThing := Struct(
  a int = 1,
  b int = 2,
  c int = 3,
);


color := (r : u8, g : u8, b : u8)

anoncolor := (u8, u8, u8)

background : color = [r = 255, g = 100, b = 12];
background = color(255, 100, 12);
background = color(r = 255, g = 100, b = 12);


x = for i in range(0,100) { if (i == 97) break i; }



let price = <item == "salad": 3.50, item == "muffin": 2.25, 2.00>


let price = item isa Salad: 3.50,
            item isa Muffin: 2.25,
            else: 2.00;


doStuff : fn(x : int) => (x : int, y : float) = {
  result.x = 3;
  result.y = 1.234;

  if (x & 1) {
    change result.x = x - 1;
    change result.y = sqrt(x);
  }
}

doStuff : (x : int) -> (x : int, y : float) = [x - 1, sin(x) + 20];

a = doStuff(1);
print(a[0]);
print(a[1]);


found = false;
for (x in someArray) {
  if (x & 1) change found = true;
}

found = someArray.reduce(false, (a, b) => (a | (b & 1)));



array<T>.reduce := fn(init : T = 0, apply : fn(prev : T, curr : T) -> (T) = {0;});

array = [1,2,3,4] : int;
sum = array reduce (0, fn(prev, curr) {prev + curr});
sum = reduce(array, 0, fn(prev, curr) {prev + curr});
prod = reduce(array, 1, fn(prev, curr) {prev * curr});

args := (int = 0, fn(prev : int, curr : int) -> (int) = {prev + curr;})
sum = (array.reduce args);

args : array.reduce.args;
result : array.reduce.result;
args.init = 0;
args.apply = fn(prev : int, curr : int) -> (int) = {prev + curr;}
result = myarray.reduce(args);

evens = reduce(array, 0, fn(prev, curr) = {curr & 1: curr, else: 0;});

stuff = fn() {
  local = 2;
  p = fn(x : int) -> () {
    print(x + capture(local));
  }

  p(10);
  change local = 3;
  p(12);
}


iterative_factorial := fn(n : int) -> (result : int) = {
  result = 1;
  for x in range(1,n) {
    change result = result * x;
  }
}


export("magic::math", {
  iterative_factorial : iterative_factorial,
  DoTheRightThing : stuff,
});